# app.py (ƒê√É S·ª¨A L·ªñI STATE)
import streamlit as st
import pandas as pd
import numpy as np
import yaml
import os

# Import c√°c h√†m b·∫°n ƒë√£ t·∫°o
# ƒê·∫£m b·∫£o file 'topsis.py' ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ return dataframe
try:
    from ahp_module import calculate_ahp_weights, save_weights_to_yaml
    from topsis_module import run_topsis_model
except ImportError as e:
    st.error(f"L·ªói import module: {e}. Vui l√≤ng ƒë·∫£m b·∫£o c√°c file `ahp_module.py` v√† `topsis.py` n·∫±m c√πng th∆∞ m·ª•c.")
    st.stop()

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="DSS",
    page_icon="ü¶à",
    layout="wide"
)

# --- KH·ªûI T·∫†O SESSION STATE ---
if 'criteria_names' not in st.session_state:
    st.session_state.criteria_names = []
if 'ahp_matrix' not in st.session_state:
    st.session_state.ahp_matrix = None  # S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o sau khi t·∫£i ti√™u ch√≠

# ====================================================================
# --- GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (UI) ---
# ====================================================================

st.title("ü¶à Ch·ªçn ƒë·ªãa ƒëi·ªÉm qu·∫≠n 7")

# --- Sidebar ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ---
st.sidebar.title("Menu")
page = st.sidebar.radio("Ch·ªçn m·ªôt trang:", ["Ph√¢n t√≠ch ƒê·ªãa ƒëi·ªÉm (TOPSIS)", "T√πy ch·ªânh Tr·ªçng s·ªë (AHP)"])

# ====================================================================
# --- TRANG 1: T√ôY CH·ªàNH TR·ªåNG S·ªê (AHP) --- (ƒê√É S·ª¨A L·ªñI)
# ====================================================================
if page == "T√πy ch·ªânh Tr·ªçng s·ªë (AHP)":
    st.header("T·∫°o v√† C·∫≠p nh·∫≠t Tr·ªçng s·ªë M√¥ h√¨nh b·∫±ng AHP")

    # T·∫£i t√™n ti√™u ch√≠ t·ª´ file CSV
    try:
        df_data = pd.read_csv("AHP_Data_synced_fixed.csv", encoding='latin1')
        st.session_state.criteria_names = [col for col in df_data.columns if col not in ['ward', 'ward_id']]
        n = len(st.session_state.criteria_names)
    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y file 'AHP_Data_synced_fixed.csv'.")
        st.stop()

    # --- S·ª¨A L·ªñI QUAN TR·ªåNG: KH·ªûI T·∫†O MA TR·∫¨N TRONG SESSION STATE ---
    # Ch·ªâ t·∫°o ma tr·∫≠n m·ªõi n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i ho·∫∑c k√≠ch th∆∞·ªõc thay ƒë·ªïi
    if st.session_state.ahp_matrix is None or st.session_state.ahp_matrix.shape[0] != n:
        st.session_state.ahp_matrix = np.ones((n, n))

    model_name = st.text_input("Nh·∫≠p t√™n m√¥ h√¨nh ƒë·ªÉ t·∫°o/c·∫≠p nh·∫≠t:", placeholder="V√≠ d·ª•: office, retail_store")

    st.subheader("Nh·∫≠p ma tr·∫≠n so s√°nh c·∫∑p:")

    # T·∫°o h√†ng ti√™u ƒë·ªÅ cho c√°c c·ªôt
    column_specs_header = [1.5] + [1] * n
    header_cols = st.columns(column_specs_header)
    for j, col_name in enumerate(st.session_state.criteria_names):
        with header_cols[j + 1]:
            st.write(f"**{col_name}**")

    # --- S·ª¨A L·ªñI: V√íNG L·∫∂P C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI ---
    # V√≤ng l·∫∑p n√†y s·∫Ω ƒë·ªçc gi√° tr·ªã t·ª´ widget v√† c·∫≠p nh·∫≠t ma tr·∫≠n trong session_state

    # B∆∞·ªõc 1: Thu th·∫≠p t·∫•t c·∫£ c√°c gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p ·ªü n·ª≠a tr√™n
    for i in range(n):
        for j in range(i + 1, n):
            key = f"matrix_{i}_{j}"
            value = st.session_state.get(key, 1.0)  # L·∫•y gi√° tr·ªã t·ª´ state n·∫øu c√≥

            # C·∫≠p nh·∫≠t ma tr·∫≠n trong state ngay l·∫≠p t·ª©c
            st.session_state.ahp_matrix[i, j] = value
            if value != 0:
                st.session_state.ahp_matrix[j, i] = 1.0 / value

    # B∆∞·ªõc 2: Hi·ªÉn th·ªã to√†n b·ªô ma tr·∫≠n (v·ªõi c√°c gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n)
    for i in range(n):
        column_specs_row = [1.5] + [1] * n
        row_cols = st.columns(column_specs_row)

        with row_cols[0]:
            st.write("")
            st.write(f"**{st.session_state.criteria_names[i]}**")

        for j in range(n):
            with row_cols[j + 1]:
                key = f"cell_{i}_{j}"

                if i == j:
                    # ƒê∆∞·ªùng ch√©o
                    st.text_input(key, value="1.00", disabled=True, label_visibility="collapsed")
                elif i < j:
                    # N·ª≠a tr√™n: √¥ cho ph√©p nh·∫≠p
                    st.number_input(
                        label=f"Input {i}-{j}",
                        min_value=0.01,
                        value=st.session_state.ahp_matrix[i, j],  # Gi√° tr·ªã l·∫•y t·ª´ state
                        step=0.1,
                        format="%.2f",
                        label_visibility="collapsed",
                        key=f"matrix_{i}_{j}"  # Key n√†y ph·∫£i kh·ªõp v·ªõi key ·ªü B∆∞·ªõc 1
                    )
                else:
                    # N·ª≠a d∆∞·ªõi: √¥ hi·ªÉn th·ªã (ƒë√£ b·ªã v√¥ hi·ªáu h√≥a)
                    st.text_input(
                        key,
                        value=f"{st.session_state.ahp_matrix[i, j]:.2f}",  # Gi√° tr·ªã l·∫•y t·ª´ state
                        disabled=True,
                        label_visibility="collapsed"
                    )

    # N√∫t t√≠nh to√°n
    if st.button("T√≠nh to√°n v√† L∆∞u Tr·ªçng s·ªë"):
        if not model_name:
            st.warning("Vui l√≤ng nh·∫≠p t√™n m√¥ h√¨nh.")
        else:
            # L·∫•y ma tr·∫≠n cu·ªëi c√πng t·ª´ session_state ƒë·ªÉ t√≠nh to√°n
            final_matrix = st.session_state.ahp_matrix
            weights, cr = calculate_ahp_weights(final_matrix)

            if weights is not None and cr is not None and cr < 0.1:
                st.success(f"Ki·ªÉm tra nh·∫•t qu√°n: T·ªêT (CR = {cr:.4f})")
                save_weights_to_yaml(weights, st.session_state.criteria_names, model_name)
                st.success(f"ƒê√£ l∆∞u th√†nh c√¥ng tr·ªçng s·ªë cho m√¥ h√¨nh '{model_name}'.")
                st.balloons()
            else:
                cr_val = cr if cr is not None else "N/A"
                st.error(f"C·∫¢NH B√ÅO: T·ª∑ s·ªë nh·∫•t qu√°n (CR = {cr_val:.4f}) kh√¥ng ƒë·∫°t y√™u c·∫ßu (>= 0.1).")

# ====================================================================
# --- TRANG 2: PH√ÇN T√çCH ƒê·ªäA ƒêI·ªÇM (TOPSIS) ---
# ====================================================================
elif page == "Ph√¢n t√≠ch ƒê·ªãa ƒëi·ªÉm (TOPSIS)":
    st.header("X·∫øp h·∫°ng ƒê·ªãa ƒëi·ªÉm T·ªëi ∆∞u b·∫±ng TOPSIS")

    # T·∫£i c√°c m√¥ h√¨nh c√≥ s·∫µn
    try:
        with open("weights.yaml", 'r', encoding='utf-8') as f:
            all_weights = yaml.safe_load(f)
            if not all_weights:
                st.warning("Ch∆∞a c√≥ m√¥ h√¨nh n√†o. Vui l√≤ng qua trang 'T√πy ch·ªânh Tr·ªçng s·ªë (AHP)' ƒë·ªÉ t·∫°o.")
                st.stop()
            model_names = list(all_weights.keys())
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file 'weights.yaml'. Vui l√≤ng t·∫°o m·ªôt m√¥ h√¨nh AHP tr∆∞·ªõc.")
        st.stop()

    selected_model = st.selectbox("Ch·ªçn m·ªôt m√¥ h√¨nh c√≥ s·∫µn ƒë·ªÉ ph√¢n t√≠ch:", model_names)

    if st.button(f"Ch·∫°y Ph√¢n t√≠ch cho m√¥ h√¨nh '{selected_model.upper()}'"):
        with st.spinner("ƒêang t√≠nh to√°n, vui l√≤ng ch·ªù..."):

            # --- T√çCH H·ª¢P H√ÄM TOPSIS TH·∫¨T ---
            report_df = run_topsis_model(
                csv_path="AHP_Data_synced_fixed.csv",
                json_path="metadata.json",  # ƒê·∫£m b·∫£o b·∫°n c√≥ file n√†y
                analysis_type=selected_model,
                all_criteria_weights=all_weights
            )

            if report_df is not None:
                st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")
                st.subheader("K·∫øt qu·∫£ X·∫øp h·∫°ng ƒê·ªãa ƒëi·ªÉm")
                st.dataframe(report_df)
                st.info(
                    f"**K·∫øt lu·∫≠n:** D·ª±a tr√™n m√¥ h√¨nh **{selected_model.upper()}**, ƒë·ªãa ƒëi·ªÉm t·ªëi ∆∞u nh·∫•t l√† **{report_df.iloc[0]['T√™n ph∆∞·ªùng']}**.")
            else:
                st.error("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch TOPSIS. Vui l√≤ng ki·ªÉm tra file 'metadata.json'.")